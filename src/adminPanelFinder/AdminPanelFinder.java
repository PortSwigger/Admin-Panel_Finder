/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminPanelFinder;

import burp.BurpExtender;
import static burp.BurpExtender.output;
import burp.IHttpRequestResponse;
import burp.IRequestInfo;
import burp.IResponseInfo;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author "Moein Fatehi moein.fatehi@gmail.com"
 */
public class AdminPanelFinder extends javax.swing.JPanel implements burp.IHttpListener{
    private static int sentRequests=0;

    private List<String> bruteForce_dict=null;
    private static List<String> send_dict=new ArrayList<>();
    
    private static int threads_max=50;
    private static int threads_default=10;
    HTTPrequest[] threadsArr=null;
    
    private static IHttpRequestResponse baseReqResp=null;
    private static IHttpRequestResponse invalidReqResp=null;
    private static int invalidStatus=403;
    private static String extension_name="AdminPanelFinder";
    private static String invalidFile="FileDoesNot.Exist";

    private static List<IHttpRequestResponse> ReqRespList=new ArrayList<>();
    
    private static void updateBaseReqRespTable(IHttpRequestResponse reqResp) {
        DefaultTableModel model=(DefaultTableModel)baseReqRespTable.getModel();
        String host=reqResp.getHttpService().getHost();
        int port=reqResp.getHttpService().getPort();
        IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
        String path=reqInfo.getUrl().getPath();
        String method=reqInfo.getMethod();
        Object rowData[];
        if(reqResp.getResponse()!=null){
            IResponseInfo respInfo=BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse());
            int status=respInfo.getStatusCode();
            int length=reqResp.getResponse().length-respInfo.getBodyOffset();
            rowData=new Object[]{host,port,path,method,status,length};
        }
        else{
            rowData=new Object[]{host,port,path,method,"",""};
        }
        
        if(model.getRowCount()>0){
            model.removeRow(0);
        }
        model.addRow(rowData);
        
    }
    /**
     * Creates new form BackupFinder
     */
    public AdminPanelFinder() {
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Finder = new javax.swing.JPanel();
        extensionName_label = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        ReqRespTable = new javax.swing.JTable();
        progressLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        openInBrowserButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        removeStatusButton = new javax.swing.JButton();
        Options = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        baseReqRespTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        bruteForce_checkbox = new javax.swing.JCheckBox();
        bruteForce_comboBox = new javax.swing.JComboBox<>();
        bruteForce_Label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        methodCombobox = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        invalidStatusField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        invalidFile_TextInBody = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        threadsField = new javax.swing.JTextField();
        threadsErrorLabel = new javax.swing.JLabel();
        throttleField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        threadsErrorLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        levelComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        status_IncludeCheckBox = new javax.swing.JCheckBox();
        status_IncludeField = new javax.swing.JTextField();
        status_ExcludeCheckBox = new javax.swing.JCheckBox();
        status_ExcludeField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        extensionField = new javax.swing.JTextField();
        rootDirField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        level_verbose = new javax.swing.JLabel();
        threadsErrorLabel3 = new javax.swing.JLabel();

        extensionName_label.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        extensionName_label.setForeground(new java.awt.Color(255, 147, 0));
        extensionName_label.setText("Backup Finder");

        ReqRespTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Host", "Port", "URL", "Method", "Status", "Length"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReqRespTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReqRespTableMouseClicked(evt);
            }
        });
        jScrollPane18.setViewportView(ReqRespTable);
        if (ReqRespTable.getColumnModel().getColumnCount() > 0) {
            ReqRespTable.getColumnModel().getColumn(0).setMinWidth(40);
            ReqRespTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            ReqRespTable.getColumnModel().getColumn(0).setMaxWidth(70);
            ReqRespTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            ReqRespTable.getColumnModel().getColumn(1).setMaxWidth(200);
            ReqRespTable.getColumnModel().getColumn(2).setMinWidth(50);
            ReqRespTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            ReqRespTable.getColumnModel().getColumn(2).setMaxWidth(70);
            ReqRespTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            ReqRespTable.getColumnModel().getColumn(3).setMaxWidth(600);
            ReqRespTable.getColumnModel().getColumn(4).setMinWidth(80);
            ReqRespTable.getColumnModel().getColumn(4).setPreferredWidth(80);
            ReqRespTable.getColumnModel().getColumn(4).setMaxWidth(100);
            ReqRespTable.getColumnModel().getColumn(5).setMinWidth(60);
            ReqRespTable.getColumnModel().getColumn(5).setMaxWidth(80);
            ReqRespTable.getColumnModel().getColumn(6).setMinWidth(60);
            ReqRespTable.getColumnModel().getColumn(6).setMaxWidth(80);
        }

        progressLabel.setText("Progress");

        openInBrowserButton.setText("Open");
        openInBrowserButton.setToolTipText("Open page in browser");
        openInBrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openInBrowserButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        removeStatusButton.setText("-Status");
        removeStatusButton.setToolTipText("Remove all rows with the same status as selected row.");
        removeStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStatusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FinderLayout = new javax.swing.GroupLayout(Finder);
        Finder.setLayout(FinderLayout);
        FinderLayout.setHorizontalGroup(
            FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FinderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FinderLayout.createSequentialGroup()
                        .addComponent(extensionName_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(FinderLayout.createSequentialGroup()
                        .addGroup(FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressLabel)
                            .addComponent(openInBrowserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        FinderLayout.setVerticalGroup(
            FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FinderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extensionName_label)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FinderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addGroup(FinderLayout.createSequentialGroup()
                        .addComponent(openInBrowserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeStatusButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Finder", Finder);

        baseReqRespTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Host", "Port", "URL", "Method", "Status", "Length"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        baseReqRespTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                baseReqRespTableMouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(baseReqRespTable);
        if (baseReqRespTable.getColumnModel().getColumnCount() > 0) {
            baseReqRespTable.getColumnModel().getColumn(0).setMinWidth(100);
            baseReqRespTable.getColumnModel().getColumn(0).setMaxWidth(200);
            baseReqRespTable.getColumnModel().getColumn(1).setMaxWidth(70);
            baseReqRespTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            baseReqRespTable.getColumnModel().getColumn(2).setMaxWidth(350);
            baseReqRespTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            baseReqRespTable.getColumnModel().getColumn(3).setMaxWidth(120);
            baseReqRespTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            baseReqRespTable.getColumnModel().getColumn(4).setMaxWidth(80);
            baseReqRespTable.getColumnModel().getColumn(5).setPreferredWidth(60);
            baseReqRespTable.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 147, 0));
        jLabel7.setText("Base Request-Response");

        jLabel1.setText("(Double click for details)");

        bruteForce_checkbox.setSelected(true);
        bruteForce_checkbox.setText("Brute-force zip files");

        bruteForce_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default dictionary", "load dictionary" }));
        bruteForce_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bruteForce_comboBoxActionPerformed(evt);
            }
        });

        bruteForce_Label.setForeground(new java.awt.Color(58, 163, 79));

        jLabel2.setText("Method");

        methodCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HEAD", "GET" }));
        methodCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodComboboxActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 147, 0));
        jLabel8.setText("Not Found Pages");

        jLabel3.setText("Status");

        invalidStatusField.setEditable(false);
        invalidStatusField.setText("403");

        jLabel4.setText("Not-Found text in Response (GET only)");

        invalidFile_TextInBody.setToolTipText("fill if Not-found status is not 404");

        jLabel10.setText("Threads");

        threadsField.setText("10");
        threadsField.setToolTipText("[1,50]");
        threadsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threadsFieldActionPerformed(evt);
            }
        });

        threadsErrorLabel.setText("Threads: [1-50]");

        throttleField.setText("0");
        throttleField.setToolTipText("[1,50]");
        throttleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throttleFieldActionPerformed(evt);
            }
        });

        jLabel12.setText("Throttle");

        threadsErrorLabel1.setText("Miliseconds");

        jLabel5.setText("Level");

        levelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        levelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levelComboBoxActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 147, 0));
        jLabel13.setText("Status codes");

        status_IncludeCheckBox.setText("Include only");

        status_IncludeField.setText("200");

        status_ExcludeCheckBox.setSelected(true);
        status_ExcludeCheckBox.setText("Exclude");
        status_ExcludeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status_ExcludeCheckBoxActionPerformed(evt);
            }
        });

        status_ExcludeField.setText("5xx,3xx,400");

        jLabel11.setText("Extension");

        extensionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extensionFieldActionPerformed(evt);
            }
        });

        rootDirField.setText("/");
        rootDirField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootDirFieldActionPerformed(evt);
            }
        });

        jLabel14.setText("Root Dir");

        level_verbose.setForeground(new java.awt.Color(53, 188, 85));

        threadsErrorLabel3.setText("Example: php");

        javax.swing.GroupLayout OptionsLayout = new javax.swing.GroupLayout(Options);
        Options.setLayout(OptionsLayout);
        OptionsLayout.setHorizontalGroup(
            OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(OptionsLayout.createSequentialGroup()
                        .addComponent(bruteForce_checkbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bruteForce_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(bruteForce_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator2)
                    .addGroup(OptionsLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invalidStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invalidFile_TextInBody))
                    .addComponent(jSeparator3)
                    .addGroup(OptionsLayout.createSequentialGroup()
                        .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OptionsLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(OptionsLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(levelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(level_verbose))
                            .addComponent(jLabel11)
                            .addComponent(jLabel14)
                            .addComponent(jLabel8)
                            .addComponent(jLabel13)
                            .addGroup(OptionsLayout.createSequentialGroup()
                                .addComponent(status_IncludeCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(status_IncludeField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(status_ExcludeCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(status_ExcludeField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(OptionsLayout.createSequentialGroup()
                                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(OptionsLayout.createSequentialGroup()
                                        .addComponent(throttleField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(threadsErrorLabel1))
                                    .addComponent(methodCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(OptionsLayout.createSequentialGroup()
                                        .addComponent(threadsField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(threadsErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(OptionsLayout.createSequentialGroup()
                                        .addComponent(extensionField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(threadsErrorLabel3))
                                    .addComponent(rootDirField, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        OptionsLayout.setVerticalGroup(
            OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(levelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(level_verbose, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bruteForce_checkbox)
                    .addComponent(bruteForce_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bruteForce_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(methodCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(threadsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threadsErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(throttleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threadsErrorLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(threadsErrorLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rootDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(invalidStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(invalidFile_TextInBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(status_ExcludeCheckBox)
                        .addComponent(status_ExcludeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(status_IncludeCheckBox)
                        .addComponent(status_IncludeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Options", Options);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void baseReqRespTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_baseReqRespTableMouseClicked
        if(evt.getClickCount()==2){
            if(baseReqResp!=null){
                reqRespForm.setReqResp(baseReqResp);
                reqRespForm jf=new reqRespForm();
                jf.setLocation(jSeparator1.getLocationOnScreen());
                jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                jf.setVisible(true);
            }
        }
    }//GEN-LAST:event_baseReqRespTableMouseClicked

    private void ReqRespTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReqRespTableMouseClicked
        if(evt.getClickCount()==2){
            int index=(int)ReqRespTable.getValueAt(ReqRespTable.getSelectedRow(), 0)-1;
            if(ReqRespList.get(index)!=null){
                reqRespForm.setReqResp(ReqRespList.get(index));
                reqRespForm jf=new reqRespForm();
                jf.setLocationRelativeTo(null);
                jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                jf.tabs.setSelectedIndex(1);
                jf.setVisible(true);
            }
        }
    }//GEN-LAST:event_ReqRespTableMouseClicked

    private void bruteForce_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bruteForce_comboBoxActionPerformed
        int ind=bruteForce_comboBox.getSelectedIndex();
        if(ind==0){ 
            //Default dict
            updateDictListFromLevel();
            bruteForce_Label.setText("Default dictionary loaded with "+bruteForce_dict.size()+" entries)");
        }
        else if(ind==1){ // User's dictionary
            bruteForce_dict=loadFile();
            bruteForce_Label.setText("User's dictionary loaded with "+bruteForce_dict.size()+" entries)");
            level_verbose.setText("");
        }
    }//GEN-LAST:event_bruteForce_comboBoxActionPerformed

    private void methodComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodComboboxActionPerformed
        if(methodCombobox.getSelectedItem().toString().equals("HEAD")){
            invalidFile_TextInBody.setEnabled(false);
        }
        else{
            invalidFile_TextInBody.setEnabled(true);
        }
    }//GEN-LAST:event_methodComboboxActionPerformed

    private void openInBrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openInBrowserButtonActionPerformed
        if(ReqRespTable.getSelectedRow()>=0){
            int index=(int)ReqRespTable.getValueAt(ReqRespTable.getSelectedRow(), 0)-1;
            URL url=BurpExtender.callbacks.getHelpers().analyzeRequest(ReqRespList.get(index)).getUrl();
            Functions.openWebpage(url);
        }
    }//GEN-LAST:event_openInBrowserButtonActionPerformed

    private void threadsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threadsFieldActionPerformed
        String text=threadsField.getText();
        try {
            int num=Integer.parseInt(text);
            if(num>threads_max){
                num=threads_max;
                threadsField.setText(""+threads_max);
                threadsErrorLabel.setText("Max thread num: "+threads_max);
            }
            else if(num<1){
                num=1;
                threadsField.setText(""+1);
                threadsErrorLabel.setText("Min thread num: "+1);
            }
            else{
                threadsField.setText(""+num);
                threadsErrorLabel.setText("");
            }

        } catch (Exception e) {
            threadsErrorLabel.setText("Invalid Thread Num (1<=thread<=50");
            fixThreadNum();
        }
    }//GEN-LAST:event_threadsFieldActionPerformed

    private void throttleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throttleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throttleFieldActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        
        resetFields();
        FindLoginPagesFromHistory();
        FindLoginPagesFromSitemap();
        generatePayloads(baseReqResp);
        //printList(backupFiles_list);
        sendRequests(send_dict);
        
    }//GEN-LAST:event_startButtonActionPerformed

    private void status_ExcludeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status_ExcludeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_status_ExcludeCheckBoxActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        for (int i = 0; i < threadsArr.length; i++) {
            threadsArr[i].getThread().stop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void removeStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStatusButtonActionPerformed
        if(ReqRespTable.getSelectedRow()>=0){
            int index=(int)ReqRespTable.getValueAt(ReqRespTable.getSelectedRow(), 0)-1;
            int status=BurpExtender.callbacks.getHelpers().analyzeResponse(ReqRespList.get(index).getResponse()).getStatusCode();
            status_ExcludeField.setText(status_ExcludeField.getText()+","+status);
            
            for(int i=ReqRespTable.getRowCount()-1;i>=0;i--){
                if((int)ReqRespTable.getValueAt(i, 5)==status){
                    removeTableRow(i);
                }
            }
        }
        
        
    }//GEN-LAST:event_removeStatusButtonActionPerformed

    private void extensionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extensionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extensionFieldActionPerformed

    private void rootDirFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootDirFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rootDirFieldActionPerformed

    private void levelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levelComboBoxActionPerformed
        updateDictListFromLevel();
    }//GEN-LAST:event_levelComboBoxActionPerformed
    
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Finder;
    private javax.swing.JPanel Options;
    public static javax.swing.JTable ReqRespTable;
    public static javax.swing.JTable baseReqRespTable;
    private javax.swing.JLabel bruteForce_Label;
    private javax.swing.JCheckBox bruteForce_checkbox;
    private javax.swing.JComboBox<String> bruteForce_comboBox;
    private static javax.swing.JTextField extensionField;
    private javax.swing.JLabel extensionName_label;
    private static javax.swing.JTextField invalidFile_TextInBody;
    private static javax.swing.JTextField invalidStatusField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JComboBox<String> levelComboBox;
    private javax.swing.JLabel level_verbose;
    public static javax.swing.JComboBox<String> methodCombobox;
    private javax.swing.JButton openInBrowserButton;
    private static javax.swing.JProgressBar progressBar;
    private static javax.swing.JLabel progressLabel;
    private javax.swing.JButton removeStatusButton;
    private static javax.swing.JTextField rootDirField;
    private javax.swing.JButton startButton;
    private static javax.swing.JCheckBox status_ExcludeCheckBox;
    private static javax.swing.JTextField status_ExcludeField;
    private static javax.swing.JCheckBox status_IncludeCheckBox;
    private static javax.swing.JTextField status_IncludeField;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel threadsErrorLabel;
    private javax.swing.JLabel threadsErrorLabel1;
    private javax.swing.JLabel threadsErrorLabel3;
    private static javax.swing.JTextField threadsField;
    private static javax.swing.JTextField throttleField;
    // End of variables declaration//GEN-END:variables

    public static IHttpRequestResponse getBaseReqResp(){
        return baseReqResp;
    }
    public static void setBaseReqResp(IHttpRequestResponse reqResp){
        baseReqResp=reqResp;
        updateBaseReqRespTable(reqResp);
        sendInvalidRequest(reqResp);
    }
    public static String getInvalidFileName(){
        return invalidFile;
    }
    public static int getInvalidStatus(){
        return invalidStatus;
    }
    
    public static void setInvalidStatus(int status){
        invalidStatus=status;
        invalidStatusField.setText(""+status);
    }
    
    public static IHttpRequestResponse getInvalidReqResp(){
        return invalidReqResp;
    }
    public static void setInvalidReqResp(IHttpRequestResponse reqResp){
        invalidReqResp=reqResp;
        setInvalidStatus(BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse()).getStatusCode());
    }
    
    public static void sendInvalidRequest(IHttpRequestResponse reqResp){
        List<String> invalidfile=new ArrayList<>();
        invalidfile.add("/"+invalidFile);
        HTTPrequest bhr=new HTTPrequest(reqResp, invalidfile, (String) methodCombobox.getSelectedItem(),1);
        bhr.start();
    }
    
    public static void addToTable(IHttpRequestResponse reqResp) {
        IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
        if(canBeAddedToTable(reqResp)){
            IResponseInfo respInfo=BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse());
            DefaultTableModel model=(DefaultTableModel)ReqRespTable.getModel();
            String host=reqResp.getHttpService().getHost();
            int port=reqResp.getHttpService().getPort();
            String path=reqInfo.getUrl().getPath();
            String method=reqInfo.getMethod();
            int status=respInfo.getStatusCode();
            int length=reqResp.getResponse().length-respInfo.getBodyOffset();
            Object rowData[]=new Object[]{ReqRespTable.getRowCount()+1,host,port,path,method,status,length};
            model.addRow(rowData);
            ReqRespList.add(reqResp);
        }
    }

    private void generatePayloads(IHttpRequestResponse reqResp) {
        for (String thisStr : bruteForce_dict) {
            if(thisStr.contains("{ext}")){
                if(getExtension().length()>0){
                    thisStr=thisStr.replace("{ext}", getExtension());
                    output.println(thisStr);
                    send_dict.add(thisStr);
                }
            }
            else{
                send_dict.add(thisStr);
            }
        }
    }
    
    public static boolean fileIsUnique(String backupFile) {
        for (int i = 0; i < ReqRespTable.getRowCount(); i++) {
            if(ReqRespTable.getValueAt(i, 3).equals(backupFile)){
                return false;
            }
        }
        return true;
    }
    
    private List<String> loadFile(){
        List<String> dict=new ArrayList<String>();
        final JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(this);
        try {
            Scanner reader = new Scanner(fc.getSelectedFile());
            while(reader.hasNextLine()){
                dict.add(reader.nextLine());
            }
        } catch (FileNotFoundException ex) {
            bruteForce_Label.setText("Error loading file");
        }
        return dict;
    }
    
    private void initialize() {
        extensionName_label.setText(BurpExtender.getProjectName());
        bruteForce_dict=new ArrayList<String>();
        resetFields();
        levelComboBox.setSelectedIndex(3); //Level:3
        output.println("******1");
        updateDictListFromLevel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(ReqRespTable.getModel());
        ReqRespTable.setRowSorter(sorter);
        
    }
    public static int getSentRequests(){
        return sentRequests;
    }
    public static void increaseSentRequests(){
        sentRequests++;
        progressBar.setMaximum(send_dict.size());
        progressBar.setValue(getSentRequests());
        progressLabel.setText("("+getSentRequests()+"/"+send_dict.size()+")");
    }
    
    public static String getInvalidFile_ErrorText(){
        return invalidFile_TextInBody.getText();
    }
    
    public static String getExtensionName(){
        return extension_name;
    }
    
    private void resetFields() {
        send_dict=new ArrayList<>();
        ReqRespList=new ArrayList<>();
        sentRequests=0;
        DefaultTableModel model=(DefaultTableModel)ReqRespTable.getModel();
        for (int i = model.getRowCount()-1; i >=0; i--) {
            model.removeRow(i);
        }
    }
    
    private List<String> readCommonFiles() {
        try {
            return Functions.ReadFile("root_commonFiles");
        } catch (IOException ex) {
            Logger.getLogger(AdminPanelFinder.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    private void fixThreadNum() {
        String num=threadsField.getText();
        String fixed="";
        for (int i = 0; i < num.length(); i++) {
            try {
                fixed+=Integer.parseInt(num.charAt(i)+"");
            } catch (Exception e) {
            }
        }
        threadsField.setText(fixed);
    }
    
    private static int getThreads(){
        try {
            return Integer.parseInt(threadsField.getText());
        } catch (Exception e) {
            return threads_default;
        }
    }
    
    public static int getThrottle(){
        try {
            return Integer.parseInt(throttleField.getText());
        } catch (Exception e) {
            return 0;
        }
    }

    private void sendRequests(List<String> list) {
        int each=list.size()/getThreads()+1;
        int end=0;
        threadsArr=new HTTPrequest[getThreads()];
        for (int i = 0; i < getThreads(); i++) {
            end=Math.min((i+1)*each, list.size());
            List<String> temp=list.subList(i*each, end);
            HTTPrequest bhr=new HTTPrequest(getBaseReqResp(), temp, (String) methodCombobox.getSelectedItem(),3);
            threadsArr[i]=bhr;
            threadsArr[i].start();
        }
    }

    public static List<String> addListToList(List<String> list1, List<String> list2) {
        
        for (String list2element : list2) {
            list1.add(list2element);
        }
        return list1;
    }

    private static String getFileFromPath(String path){
        return path.substring(path.lastIndexOf("/")).replace("/", "");
    }
    
    private static String getFileName(String file){
        if(file.contains(".")){
            return file.substring(0,file.indexOf("."));
        }
        else{
            return file;
        }
    }
    
    private static String getFileExtension(String file){
        if(file.contains(".")){
            return file.substring(file.indexOf(".")).replace(".", "");
        }
        else{
            return "";
        }
    }
    
    private static String getLastDirFromPath(String path){
        System.out.println(path.lastIndexOf("/"));
        String p=path.substring(0,path.lastIndexOf("/"));
        System.out.println("##p: "+p);
        if(p.length()>0){  //string has more than 1 subdirectry "/"
            return p.substring(p.lastIndexOf("/")).replace("/", "");
        }
        else{
            return "";
        }
    }
    

    private void printList(List<String> backupFiles_list) {
        BufferedWriter out = null;
        try {
            
            String userHomeFolder = System.getProperty("user.home");
            File textFile = new File(userHomeFolder, "list.txt");
            out = new BufferedWriter(new FileWriter(textFile));
            out.flush();
            try {
                for (String string : backupFiles_list) {
                    out.write(string+"\n");
                }
            } finally {
                out.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(AdminPanelFinder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void printSiteMap(String str) {
        BufferedWriter out = null;
        try {
            String userHomeFolder = System.getProperty("user.home");
            File textFile = new File(userHomeFolder, "list2.txt");
            out = new BufferedWriter(new FileWriter(textFile,true));
            out.flush();
            try {
                out.append(str+"\n");
            } finally {
                out.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(AdminPanelFinder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void getExtensionFromSitemap() {
        URL url=BurpExtender.callbacks.getHelpers().analyzeRequest(baseReqResp).getUrl();
        String start=url.getProtocol()+"://"+url.getHost();
        if(getBaseReqResp().getHttpService().getPort()!=80&&getBaseReqResp().getHttpService().getPort()!=443){
            start=start+":"+getBaseReqResp().getHttpService().getPort();
        }
        start+=getRootDir();
        IHttpRequestResponse[] siteMap=BurpExtender.callbacks.getSiteMap(start);
        for (IHttpRequestResponse reqResp : siteMap) {
            IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
            if(reqResp.getHttpService().getHost().equals(getBaseReqResp().getHttpService().getHost())){
                if(reqResp.getHttpService().getPort()==getBaseReqResp().getHttpService().getPort()){
                    String thisPath=Functions.getURL(reqResp).getPath();
                    if(thisPath.startsWith(getRootDir())){
                        if(getExtension().length()==0){
                            setExtension(Functions.extractExtension_From_Request(reqResp));
                            if(getExtension().length()==0){
                                setExtension(Functions.extractExtension_From_Response(new String (reqResp.getResponse())));
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static void getExtensionFromHistory() {
        IHttpRequestResponse[] history=BurpExtender.callbacks.getProxyHistory();
        for (IHttpRequestResponse reqResp : history) {
            IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
            if(reqResp.getHttpService().getHost().equals(getBaseReqResp().getHttpService().getHost())){
                if(reqResp.getHttpService().getPort()==getBaseReqResp().getHttpService().getPort()){
                    String thisPath=Functions.getURL(reqResp).getPath();
                    if(thisPath.startsWith(getRootDir())){
                        if(getExtension().length()==0){
                            setExtension(Functions.extractExtension_From_Request(reqResp));
                            if(getExtension().length()==0){
                                setExtension(Functions.extractExtension_From_Response(new String (reqResp.getResponse())));
                            }
                        }
                    }
                }
            }
        }
    }

    private static int getLevel(){
        return levelComboBox.getSelectedIndex()+1;
    }
    
    private static boolean canBeAddedToTable(IHttpRequestResponse reqResp) {
        IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
        if(fileIsUnique(reqInfo.getUrl().getPath())){   // file is not repetetive
            if(StatusCodeIsOK(reqResp)){
                return true;
            }
        }
        return false;
    }
    
    private static boolean StatusCodeIsOK(IHttpRequestResponse reqResp) {
        int status=BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse()).getStatusCode();
        String statusStr=""+status;
        if (status_ExcludeCheckBox.isSelected()){
            Scanner sc = new Scanner(status_ExcludeField.getText());
            sc.useDelimiter(",");
            while (sc.hasNext()){
                String thisCode=sc.next();
                thisCode=thisCode.replaceAll("x", "");
                if(statusStr.startsWith(thisCode)&&thisCode.length()<=3){
                    return false;
                }
            }
        }
        if (status_IncludeCheckBox.isSelected()){
            Scanner sc = new Scanner(status_IncludeField.getText());
            sc.useDelimiter(",");
            while (sc.hasNext()){
                String thisCode=sc.next();
                thisCode=thisCode.replaceAll("x", "");
                if(statusStr.startsWith(thisCode)&&thisCode.length()<=3){
                    return true;
                }
            }
            return false;
        }
        return true;
    }
    
    
    public static boolean responseIsNotFoundPage(IHttpRequestResponse reqResp){
        if(AdminPanelFinder.getInvalidStatus()!=200){
            if(BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse()).getStatusCode()==AdminPanelFinder.getInvalidStatus()){
                return true;
            }
        }
        else{
            if (getInvalidFile_ErrorText().length()>0&&responseContainsErrorString(reqResp)){
                return true;
            }
        }
        return false;
    }
    
    private static boolean responseContainsErrorString(IHttpRequestResponse reqResp) {
        if (Functions.findRegex(getInvalidFile_ErrorText(), new String (reqResp.getResponse()))!=null){
            return true;
        }
        return false;
    }

    private void removeTableRow(int i) {
        DefaultTableModel tableModel=(DefaultTableModel)ReqRespTable.getModel();
        int thisInd=ReqRespTable.convertRowIndexToModel(i);
        tableModel.removeRow(thisInd);
        ReqRespList.remove(thisInd);
        
        updateRowNumbers();
    }

    private void updateRowNumbers() {
        DefaultTableModel model=(DefaultTableModel)ReqRespTable.getModel();
        for (int i = 0; i < ReqRespTable.getRowCount(); i++) {
            model.setValueAt(i+1, i, 0);
        }
    }

    private void updateDictListFromLevel() {
        bruteForce_dict=new ArrayList<>();
        int level=levelComboBox.getSelectedIndex()+1;
        for (int i = 1; i <= level; i++) {
            output.println("Adding level"+i+".txt");
            try {
                bruteForce_dict.addAll(Functions.ReadFile("level"+i+".txt"));
            } catch (Exception ex) {
                output.println(ex.toString());
            }
        }
        level_verbose.setText("Loaded "+bruteForce_dict.size()+" payloads");
    }
    public static String getRootDir(){
        if(rootDirField.getText().endsWith("/")){
            return rootDirField.getText().substring(0,rootDirField.getText().lastIndexOf("/"));
        }
        return rootDirField.getText().toString();
    }
    
    public static String getExtension(){
        return extensionField.getText().toString();
    }
    
    private static void setExtension(String ext){
        extensionField.setText(ext);
    }
    
    public static void FindLoginPagesFromSitemap() {
        URL url=BurpExtender.callbacks.getHelpers().analyzeRequest(baseReqResp).getUrl();
        String start=url.getProtocol()+"://"+url.getHost();
        if(getBaseReqResp().getHttpService().getPort()!=80&&getBaseReqResp().getHttpService().getPort()!=443){
            start=start+":"+getBaseReqResp().getHttpService().getPort();
        }
        start+=getRootDir();
        IHttpRequestResponse[] siteMap=BurpExtender.callbacks.getSiteMap(start);
        for (IHttpRequestResponse reqResp : siteMap) {
            IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
            if(reqResp.getHttpService().getHost().equals(getBaseReqResp().getHttpService().getHost())){
                if(reqResp.getHttpService().getPort()==getBaseReqResp().getHttpService().getPort()){
                    String thisPath=Functions.getURL(reqResp).getPath();
                    if(thisPath.startsWith(getRootDir())){
                        findPasswordInHTML(reqResp);
                    }
                    
                }
            }
        }
    }
    
    public static void FindLoginPagesFromHistory() {
        IHttpRequestResponse[] history=BurpExtender.callbacks.getProxyHistory();
        for (IHttpRequestResponse reqResp : history) {
            IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
            if(reqResp.getHttpService().getHost().equals(getBaseReqResp().getHttpService().getHost())){
                if(reqResp.getHttpService().getPort()==getBaseReqResp().getHttpService().getPort()){
                    String thisPath=Functions.getURL(reqResp).getPath();
                    if(thisPath.startsWith(getRootDir())){
                        findPasswordInHTML(reqResp);
                    }
                }
            }
        }
    }
    
    private static void findPasswordInHTML(IHttpRequestResponse reqResp) {
        if(reqResp.getResponse()!=null){
            if(BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp).getMethod().toLowerCase().equals("get")){
                if (new String (reqResp.getResponse()).toLowerCase().replaceAll(" ", "").contains("type=\"password\"")){
                    addToTable(reqResp);
                }
            }
        }
    }

    @Override
    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) {
        if(!messageIsRequest){
            findPasswordInHTML(messageInfo);
        }
    }
}
